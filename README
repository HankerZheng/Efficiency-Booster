这是一个基本的效率提升软件

要求:
	1. Python 2.7
	2. MySQL
	3. mysql-connector-python

功能:
	1. 命令行参数
		- 如果检测CTRL-C 进入命令行模式 接收命令如下
			- s/start:		新建一个新项目 开始时间以确认时间为准
							  - 如果当前有一个项目正在进行 则暂停当前的项目
							  - 需要输入 event_title and event_type
			- p/pause:		暂停一个正在执行的项目
			- r/resume:		恢复一个被暂停的项目
							  - 会显示当前被暂停项目的列表 选择一个项目继续
			- e/end:		结束当前的项目
			- ls[d/w/m]		显示当天/周/月完成的项目
			- q/quit		退出命令行模式
			- exit			退出程序
								- 每次退出程序 都会将正在进行的任务 冷冻任务序列化
								- 序列化结果保存在DATA文件中

	2. event参数
		- event_id:		项目id (primary key)
						  - 根据项目建立timestamp赋值
		- start_time:	开始时间 - timestamp
		- end_time:		结束时间 - timestamp
		- pause_inter:	暂停的持续时间
						  - 按下暂停后 保存当前时间	(如果暂停时间大于2年 则判定为timestamp)
						  - 按下恢复后 计算中间时间差
						  - 再按下暂停后 保存当前时间减去之前的时间差
		- inter_time:	项目的持续时间
						  - end_time - start_time + pause_inter
		- time_zone:	项目时区 = time.altzone
		- event_title:	项目标题 - 一般以tag的形式输入 以';'结尾 case-insensitive
						  - guitar; pick sweeping;
						  - swimming
						  - python; leetcode; backtracing;
						  - python; transwarp project
		- event_type:	项目类型 - can be customized in config.py
						  - 0 == career-oriented
						  - 1 == self-promotion
						  - 2 == sports
						  - 3 == no contribution
		- event_ctt:	项目内容

	3. User Interface:
		- welcome interface
			- 显示当前bonus
				- 如果一天内记录的数据超过18小时 则奖励加20
				- 每完成一个事件 则奖励加1
				- 过了12点之后的第一次提交开始清算奖励
				- 奖励数据存放在bonus_log的第一行
				- bonus_log:	YYYY-MM-DD event_count=; event_time=; type1_contribution=;...; typy3_contribution=;
			- 显示当前正在进行的项目 以及 暂停的项目
					|  Efficiency Boost v0.1
					|
					|							Current Bonus: #
					|  Current Event:
					|		Title:		Guitar; Pick Sweeping;
					|		Type:		Self-Promotion
					|		Starts@ 	YYYY-MM-DD HH:MM:SS
					|		Duration:	HH:MM:SS 	(refresh every 10s)
					|  Frozen Event:
					|	 0*	Title:		Python; Transwarp; Web App;
					|		Type:		Career-Oriented
					|		Starts@		YYYY-MM-DD HH:MM:SS
					|		Paused For:	HH:MM:SS 	(refresh every 10s)
		- start interface
			- 显示项目类型 提示输入类型号码
			- 提示输入项目title
			- 回到welcome interface
		- pause interface
			- 提示是否确认
			- 回到Welcome界面
					|  Current Event:
					|		[None]
					|  Frozen Event:
					|	 0*	Title:		Python; Transwarp; Web App;
					|		Type:		Career-Oriented
					|		Starts@ 	YYYY-MM-DD HH:MM:SS
					|		Paused For:	HH:MM 	(refresh every 1 min)
					|	 1*	Title:		Guitar; Pick Sweeping;
					|		Type:		Self-Promotion
					|		Starts@ 	YYYY-MM-DD HH:MM:SS
					|		Paused For:	HH:MM 	(refresh every 1 min)
		- resume interface
			- 提示选择哪一个项目进行解冻
			- 从pause interface回到welcome interface

	4. Data Structure:
		- Interface class - for display use
		- command handler
		- event class - just a dict, fetch from DataBase
		- config preset

	5. Logic chain
		- press ctrl-c, go to cmd mode, execute different codes according to cmd
			- s/start
				* enter Welcome_Interface
				* create a new event entry in DataBase with TITLE and TYPE
				  list TYPE table while creating (add_display)
				* go back to WELCOME interface
				* display it as CURRENT EVENTS
				* if there is already an event in process, automatically call pause first
			- p/pause
				* move current_event into frozen_events lists, current_event = None
				* update pause_inter in DataBase to time.time()
					+ read pause_inter first if larger than MAX_PAUSE, assume it as timestamp
												smaller than MAX_PAUSE, assume it as time_interval
					+ renew the pause_inter to 'timestamp' or 'time.time() - time_interval'
				* go back to WELCOME interface
			- r/resume
				* choose a frozen event to be melt - index is showed in FROZEN EVENTS
				* move the chosen event into current_event
				* set pause_inter to time-interval form
			- e/end
				* set end_time and inter_time (inter_time = end - start - pause_inter)
				* wait for input from user to set EVENT_CTT
				* update new data into DataBase, remove this event from current_event
			- ls[d/w/m]
				* clear the screen
				* list all the events whose start_time is within day/week/month
				* YYYY-MM-SS HH:MM = TITLE | TYPE | INTER_TIME | PAUSE_INTER
				* press ctrl-C to go back to WELCOME interface
			- q/quit
				* quit cmd mode, go back to WELCOME
			- exit
				* save current state to DATA and exit the program
// on pause, we set pause_inter to timestamp form
// on resume, we set pause_inter to time-interval form

		- interfaces - 
			- WELCOME interface 
				- 调用方法为 inter = Welcom_Interface(), inter.display(curevent, froevents, bonus)
				- interface add_print PREVIEW - print the frozen events
					|  Frozen Event:
					|	 0*	Title:		Python; Transwarp; Web App;
					|		Type:		Career-Oriented
					|		Starts@ 	YYYY-MM-DD HH:MM:SS
					|		Paused For:	HH:MM 	(refresh every 1 min)
					|	 1*	Title:		Guitar; Pick Sweeping;
					|		Type:		Self-Promotion
					|		Starts@ 	YYYY-MM-DD HH:MM:SS
					|		Paused For:	HH:MM 	(refresh every 1 min)
				- ways to go into this interface
					* first execute this program
					* 
			- TYPE interface
				- 调用方法为 inter = Type_Interface(), inter.display(curevent, froevents, bonus)
				- interface add_print PREVIEW - print the type and content
					|
					|	Choose one Type from all below:
					|		0. Career-Oriented
					|		1. Self-Promotion
					|		2. Sports
					|		3. Just-Watering
				- ways to go into this interface
					* type start and create a new event
			- LIST interface
				- 调用方法为 inter = List_Interface(cmd), inter.display(curevent, froevents, bonus)
				-interface add_print PREVIEW - print the fetched data
					| 	0. YYYY-mm-dd HH:MM = TITLE | TYPE | INTER_TIME | PAUSE_INTER
					|	1. YYYY-mm-dd HH:MM = TITLE | TYPE | INTER_TIME | PAUSE_INTER
					|	2. YYYY-mm-dd HH:MM = TITLE | TYPE | INTER_TIME | PAUSE_INTER
				- ways to go into this interface
					* in 'lsd/w/m' command line
			- INPUT interface
				- 调用方法为 inter = Input_Interface inter.display(curevent, froevents, bonus)
				- interface add_print PREVIEW - print what needs to be added
					|
					| Please type in event_ctt:
				- ways to get into this interface
					* end
			- HELP interface
				- 调用方法为 inter = Help_Interface(), inter.display(curevent, froevents, bonus)
				- interface add_print PREVIEW - print all the available cmd
					| xxx: instruction...
		- other logic 
			- read bonus and unfinished events in other files
			- bonus_log appending